name: Java CI/CD with Gradle & Docker

on:
  push:
    branches: [ "backend/main" ]

  workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      
      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # Gradle wrapper 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew

      # GitHub Secrets에서 application.yml 파일 생성
      - name: Create application.yml from GitHub Secrets
        run: |
          mkdir -p backend/src/main/resources
          echo "${{ secrets.APPLICATION }}" | base64 --decode > backend/src/main/resources/application.yml

      # Gradle 빌드 실행
      - name: Build with Gradle Wrapper
        working-directory: backend
        run: ./gradlew build

      # Docker 이미지 빌드
      - name: Build Docker Image
        working-directory: backend
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/2025capstone:latest .

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Hub에 이미지 푸시
      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/2025capstone:latest

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      # EC2에 SSH 접속하기 위해 known_hosts 파일에 EC2 호스트 추가
      - name: Update Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # EC2에 Docker 이미지 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 기존 컨테이너가 있으면 중지하고 삭제
            sudo docker stop $(sudo docker ps -q --filter ancestor=${{ secrets.DOCKERHUB_USERNAME }}/2025capstone)
            sudo docker rm $(sudo docker ps -aq --filter ancestor=${{ secrets.DOCKERHUB_USERNAME }}/2025capstone)
            
            # 최신 Docker 이미지 가져오기
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/2025capstone:latest
            
            # 새 컨테이너 실행
            sudo docker run --rm -it -d -p 8080:8080 --name 2025capstone ${{ secrets.DOCKERHUB_USERNAME }}/2025capstone:latest
            
            # 사용하지 않는 Docker 이미지 및 캐시 정리
            sudo docker system prune -f
